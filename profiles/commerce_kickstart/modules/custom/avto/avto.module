<?php
/**
 * Created by PhpStorm.
 * User: nata
 * Date: 16.05.17
 * Time: 20:03
 */


/**
 * Implements hook_views_pre_build().
 */
function avto_views_pre_build(&$view) {
  if ($view->name == 'taxonomy_term_custom' && $view->current_display == 'block_1') {
    $arg = arg(2);
    //make right links (products/%/%) for brand/* pages
    $view->field['name']->options['alter']['path'] = "products/$arg/[tid]";
    $view->field['field_icon']->options['alter']['path'] = "products/$arg/[tid]";
  }
}


/**
 * Implements hook_views_pre_render().
 */
function avto_views_pre_render(&$view) {

//  if ($view->name == 'similar_products' && $view->current_display == 'block'){
//    foreach ($view->result as $key => $result){
//      if($view->result[$key]->nid == arg(1)){
//        $view->result[$key]->nid = '';
//      }
//    }
//  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function avto_preprocess_page(&$vars) {
  $product_display_types = commerce_product_reference_node_types();
  if (isset($vars['node']->type) && isset($product_display_types[$vars['node']->type])) {
    $vars['title'] = $vars['node']->title; //set title on product page
  }
  if (isset($vars['page']['content']['system_main']['information']['shipping_profile'])) {
    unset($vars['page']['content']['system_main']['information']['shipping_profile']);
  }
}

/**
 * Implements hook_menu().
 */
function avto_menu() {
  $items = array();

  $items['popup/%ctools_js'] = array(
    'page callback' => 'popup_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['avto/batch_fix'] = array(
    'title' => 'Batch fix',
    'page callback' => 'avto_batch_fix',
    'access arguments' => array('administer users'),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function avto_block_info() {
  $blocks = array();
  $blocks['popup_block'] = array(
    'info' => t('My popup block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['call_block'] = array(
    'info' => t('Call block'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function avto_block_view($block_name = '') {
  $block = array();
  if ($block_name == 'popup_block') {
    ctools_include('modal');
    ctools_modal_add_js();
    $content = _mymodule_make_link(t('Bye fast'));
    $block = array(
      'subject' => t('Hello world'),
      'content' => t($content),
    );
  }
  if ($block_name == 'call_block') {
    ctools_include('modal');
    ctools_modal_add_js();
    $content = _mymodule_make_link(t('Feedback'));
    $block = array(
      'subject' => t('Feedback'),
      'content' => t($content),
    );
  }
  return $block;

}

/**
 * Helper function to make a link.
 */
function _mymodule_make_link($link_text = '') {
  // Set a default value if no text in supplied.
  if (empty($link_text)) {
    $link_text = 'Magical Modal';
  }
  $nid = arg(1);
  avto_ctools_popup_style();
//  return ctools_modal_text_button(t('Contact'), 'popup/nojs/' . $nid, t('Contact'), 'ctools-modal-first-popup-style');

  return '<div id="magical-modal-link">' . l($link_text, 'popup/nojs/' . $nid,
    array(
      'attributes' => array(
        'class' => array(
          'ctools-use-modal',
          'ctools-modal-first-popup-style'
        )
      )
    )) . '</div>';
}


/**
 * Ajax menu callback.
 */
function popup_callback($ajax = FALSE, $nid = NULL) {
  global $user;
  if (!$ajax) {
    return "Javascript required";
  }

  ctools_include('node.pages', 'node', '');
  ctools_include('modal');
  ctools_include('ajax');
//  ctools_add_js('auto-submit');
  $type = 'request';

  if (is_numeric($nid)) {
    $product = node_load($nid);
    if (!$product || $product->type != 'product_display') {
      $nid = NULL;
    }
  }
  else {
    $nid = NULL;
  }
  // Create a blank node object.
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => $type,
    'language' => LANGUAGE_NONE,
    'field_product_ref' => array('und' => array(0 => array('target_id' => $nid)))
  );

  $form_state = array(
    'title' => t('Send order'),
    'ajax' => TRUE,
  );

  $form_state['build_info']['args'] = array($node);
  $output = ctools_modal_form_wrapper($type . '_node_form', $form_state);


  if (!empty($form_state['executed'])) {
    $title = t("Sent");
    $output = t("Your application has been sent and will be processed within 
    24 hours (taking into account the schedule of work). We will call you.");
    $output = "<div class=\"popup-message\">$output<div/>";
    $commands = array();
    $commands[] = ctools_modal_command_display($title, $output);
    if ($nid) {
      $commands[] = ctools_ajax_command_redirect('/node/' . $nid, 10);
    }

    print ajax_render($commands);
    exit;
  }

  print ajax_render($output);
  exit;
}

/**
 *Popupâ€™s setings function.
 */

function avto_ctools_popup_style() {

  static $added = FALSE;
  if ($added == FALSE) {
    $added = TRUE;
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
//    $path = drupal_get_path('theme', 'bootstrap_business');
    $popup_style = array(
      'first-popup-style' => array(
        'modalSize' => array(
          'type' => 'fixed',
          'width' => 700,
          'height' => 500,
          'addHeight' => 700,
        ),
        'modalOptions' => array(
          'opacity' => (float) 0.8,

          'background-color' => '#444',
        ),
        'closeText' => '',
        'loadingText' => '',
        'animation' => 'fadeIn',
//        'modalTheme' => $path,
        'animationSp/eed' => 'fast',
      ),
    );
    drupal_add_js($popup_style, 'setting');
    ctools_add_js('my_popup_style', 'avto');
  }
}

/**
 * Implements hook_form_alter().
 */
function avto_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {

    case 'contact_site_form':

      $form['left'] = array('#type' => 'fieldset');
      $form['right'] = array('#type' => 'fieldset');

      $form['mail']['#required'] = FALSE;
      $form['subject']['#title'] = t('Your phone');
      $form['copy']['#access'] = FALSE;

      $form['left']['mail'] = $form['mail'];
      $form['left']['subject'] = $form['subject'];
      $form['left']['name'] = $form['name'];
      $form['right']['message'] = $form['message'];

      if (!empty($form['captcha'])) {
        $form['right']['captcha'] = $form['captcha'];
        unset($form['captcha']);
      }

      unset($form['mail']);
      unset($form['subject']);
      unset($form['name']);
      unset($form['message']);
      break;
    case 'request_node_form':
      $form['left'] = array('#type' => 'fieldset');
      $form['right'] = array('#type' => 'fieldset');

      $form['title_field']['und'][0]['value']['#attributes']['placeholder'] = $form['title_field']['und']['#title'];
      $form['title_field']['und'][0]['value']['#title_display'] = 'invisible';
      $form['left']['title_field'] = $form['title_field'];
      unset($form['title_field']);

      $form['field_massage']['und'][0]['value']['#attributes']['placeholder'] = $form['field_massage']['und']['#title'];
      $form['field_massage']['und'][0]['value']['#title_display'] = 'invisible';
      $form['right']['field_massage'] = $form['field_massage'];
      unset($form['field_massage']);

      $form['field_phone_apply']['und'][0]['value']['#attributes']['placeholder'] = '+38';
      $form['field_phone_apply']['und'][0]['value']['#title_display'] = 'invisible';
      $form['left']['field_phone_apply'] = $form['field_phone_apply'];
      unset($form['field_phone_apply']);

      $form['field_product_ref']['#access'] = FALSE;
      $form['actions']['submit']['#value'] = t('Send');

      break;

    case 'user_login':
      $form['name']['#description'] = '';
      $form['pass']['#description'] = '';
      break;
    case 'user_register_form':
      $form['account']['name']['#description'] = '';
      $form['account']['mail']['#description'] = '';
      break;
    case 'product_display_node_form':
      $form['actions']['submit']['#submit'][] = 'postsave_node';
      break;
  }
}

/**
 * Implements hook_commerce_price_formatted_components_alter().
 */
function avto_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  $components['commerce_price_formatted_amount']['title'] = t('Order Total');
}

/**
 * General Callback for form_alter
 *
 * @param type $form
 * @param type $form_state
 */
function postsave_node($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $node = node_load($nid);
  if ($node->type == 'product_display') {
    $pid = $node->field_product['und'][0]['product_id'];
    $product = commerce_product_load($pid);
    if (!empty($product)) {
      $sku = $node->field_car_brand['und'][1]['tid'] . '-' .
        $node->field_spare_part['und'][0]['tid'] . '-' . $node->nid;
      $product->sku = $sku;
      commerce_product_save($product);
    }
  }
}


/**
 * The batch callback.
 */
function avto_batch_fix() {
  $batch = array(
    'operations' => array(),
    'finished' => 'avto_batch_fix_finished',
    'title' => t('Batch fix'),
    'init_message' => t('Fix is starting...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Fix has encountered an error.')
  );
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'product_display', '=')
    ->execute()
    ->fetchCol();

  foreach ($nids as $nid) {
    $batch['operations'][] = array('avto_batch_fix_process', array($nid));
  }
  batch_set($batch);
  batch_process('user'); // The path to redirect to when done.
}

/**
 * The batch processor.
 */
function avto_batch_fix_process($word, &$context) {
  // Do heavy lifting here...
  // Display a progress message...
  $node = node_load($word);
  node_save($node);
  $context['message'] = "Now processing $word...";
}

/**
 * The batch finish handler.
 */
function avto_batch_fix_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Fix is complete!');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
  drupal_set_message(l('Run again', 'avto/batch_fix'));
}